from __future__ import print_function
import json
import getpass
import time
try:
    import readline
except:
    pass
import subprocess
import os
import sys
import ipaddress
import argparse
import interfaces.switchpreviewutil as switchpreviewutil
from localutils.custom_utils import *
import localutils.program_globals 


def sshlogin(user,device,command):
    cipher_re_attempt = None
    sshcommand = 'ssh {}@{} -o ConnectTimeout=3 -C {}'.format(user,device,command)
    while True:
        if cipher_re_attempt:
            sshcommand += ' -c {}'.format(cipher_re_attempt)
        try:
            output = subprocess.Popen(
                                      sshcommand,
                                      stderr = subprocess.PIPE,
                                      shell=True,
                                      universal_newlines=True)
            stdout, stderr = output.communicate()
            del stdout
            if 'no matching cipher' in stderr:
               if not cipher_re_attempt:
                    result = re.findall(r'aes\d{3}-[a-z]{3}', stderr)
                    cipher_re_attempt = result[-1]
                    continue
               else:
                    print(stderr)
                    return
            else:
                print(stderr)
                return
        except KeyboardInterrupt:
            return
            print('\nUser killed ssh attempt...\n')
            return
        except Exception as e:
            print('Error: {}'.format(e))
            return


def create_erspan_dest(name,user,erspandestip,erspansourceip,epgdn):
    url = """https://{apic}/api/node/mo/uni/infra/destgrp-{name}.json""".format(apic=apic,name=name)
    urllist.append(('ERSPAN DESTINTATION',url))
    data = """{{"spanDestGrp":{{"attributes":{{"name":"{name}","descr":"{user} {currenttime}","status":"created"}},"children":[
              {{"spanDest":{{"attributes":{{"name":"{name}","status":"created"}},"children":[
              {{"spanRsDestEpg":{{"attributes":{{"ip":"{erspandestip}","srcIpPrefix":"{erspansourceip}",
              "tDn":"{epgdn}","status":"created,modified"}},"children":[]}}}}]}}}}]}}}}"""
    data = data.format(apic=apic,name=name,user=user,erspandestip=erspandestip,erspansourceip=erspansourceip,epgdn=epgdn,currenttime=currenttime)
    results = PostandGetResponseData(url,data,cookie)
    if results[1] == None:
        print('Successfully created ERSPAN Destination')
    else:
        print('ESPAN Destination ERROR: {}'.format(repr(results)))
    return 'uni/infra/destgrp-{name}'.format(name=name)

def create_span_sourcegroup(name,erspandestname,filterdn):
    url = """https://{apic}/api/node/mo/uni/infra/srcgrp-{name}.json""".format(apic=apic,name=name)
    urllist.append(('ERSPAN SOURCEGROUP',url))
    if filterdn != None:
        data = """{{"spanSrcGrp":{{"attributes":{{"name":"{name}","descr":"auto generated for span to oobmsw {currenttime}","adminSt":"enabled","status":"created"}},"children":[
                  {{"spanSpanLbl":{{"attributes":{{"name":"{erspandestname}","status":"created"}}}}}},
                  {{"spanRsSrcGrpToFilterGrp":{{"attributes":{{"tDn":"{filterdn}","status":"created"}}}}}}]}}}}"""
    else:
        data = """{{"spanSrcGrp":{{"attributes":{{"name":"{name}","descr":"auto generated for span to oobmsw {currenttime}","adminSt":"enabled","status":"created"}},"children":[
                  {{"spanSpanLbl":{{"attributes":{{"name":"{erspandestname}","status":"created"}}}}}}]}}}}"""
    data = data.format(name=name,erspandestname=erspandestname,currenttime=currenttime,filterdn=filterdn)
    results = PostandGetResponseData(url,data,cookie)
    if results[1] == None:
        print('Successfully created ERSPAN SourceGroup')
    else:
        print('ESPAN SourceGroup ERROR: {}'.format(repr(results)))
    return 'uni/infra/srcgrp-{name}'.format(name=name)


def create_span_sourcelocations(name,spangroupdn,interfacesources):
    url = """https://{apic}/api/node/mo/{spangroupdn}/src-{name}.json""".format(apic=apic,name=name,spangroupdn=spangroupdn)
    urllist.append(('ERSPAN SOURCE INTERFACES',url))
    data = """{{"spanSrc":{{"attributes":{{"name":"{name}","descr":"autogenerated {currenttime}","status":"created"}},
    "children":[]}}}}""".format(name=name,currenttime=currenttime)
    interfacednlist = []
    for interfacedn in interfacesources:
        pathep = """{{"spanRsSrcToPathEp":{{"attributes":{{"tDn":"{interfacedn}","status":"created"}},"children":[]}}}}""".format(interfacedn=interfacedn)
        interfacednlist.append(json.loads(pathep))
    data = json.loads(data)
    data['spanSrc']['children'] = interfacednlist
    data = json.dumps(data)
    results = PostandGetResponseData(url,data,cookie)
    if results[1] == None:
        print('Successfully created ERSPAN Source Interfaces')
    else:
        print('ESPAN Source Interfaces ERROR: {}'.format(repr(results)))    #"""{"spanRsSrcToPathEp":{"attributes":{"tDn":"topology/pod-1/paths-101/pathep-[eth1/3]","status":"created"},"children":[]}},



def create_filter_acl(filtername,user,srcip,dstip,protocol,srcports,destports):
    url = "https://{apic}/api/node/mo/uni/infra/filtergrp-{filtername}.json".format(apic=apic,filtername=filtername)
    urllist.append(('ERSPAN FILTER',url))
    aclentries = """[{{"spanFilterEntry":{{"attributes":{{"srcAddr":"{sip}","dstAddr":"{dip}","status":"created"}}}}}},
                     {{"spanFilterEntry":{{"attributes":{{"srcAddr":"{dip}","dstAddr":"{sip}","status":"created"}}}}}}]"""
    aclentries = aclentries.format(sip=srcip,dip=dstip)
    aclentries = json.loads(aclentries)
    if protocol:
        entry = {}
        entry["ipProto"] = protocol
        aclentries[0]['spanFilterEntry']['attributes'].update(entry)
        aclentries[1]['spanFilterEntry']['attributes'].update(entry)

    entry = {}
    entry['dstPortFrom'] = str(destports[0])
    entry['dstPortTo'] = str(destports[1])
    entry['srcPortFrom'] = str(srcports[0])
    entry['srcPortTo'] = str(srcports[1])
    aclentries[0]['spanFilterEntry']['attributes'].update(entry)
    entry = {}
    entry['dstPortFrom'] = str(srcports[0])
    entry['dstPortTo'] = str(srcports[1])
    entry['srcPortFrom'] = str(destports[0])
    entry['srcPortTo'] = str(destports[1])
    aclentries[1]['spanFilterEntry']['attributes'].update(entry)
    data = """{{"spanFilterGrp":{{"attributes":{{"name":"{filter}","descr":"{user}","status":"created"}},"children":[]}}}}""".format(filter=filtername,user=user)
    data = json.loads(data)
    data['spanFilterGrp']['children'] = aclentries
    data = json.dumps(data)
    results = PostandGetResponseData(url,data,cookie)
    if results[1] == None:
        print('Successfully created ERSPAN Filter')
    else:
        print('ESPAN Filter ERROR: {}'.format(repr(results)))
    return 'uni/infra/filtergrp-{filtername}'.format(filtername=filtername)
    

def monitor_interface_menu():
    while True:
        print("\nSelect type of interface(s) to monitor: \n\n" + \
          "\t1.) Physical Interfaces \n" + \
          "\t2.) PC Interfaces \n" + \
          "\t3.) VPC Interfaces \n")
        selection = custom_raw_input("Select number: ")
        print('\r')
        if selection.isdigit() and selection != '' and 1 <= int(selection) <= 3:
            break
        else:
            continue
    return selection 


def main(user=None,prestaged=False):
    clear_screen()
    global cookie
    global apic
    global currenttime
    global urllist
    urllist = []
    currenttime = localutils.program_globals.TIME
    cookie = localutils.program_globals.TOKEN
    if user == None:
        user = os.getenv['USER']
    apic = localutils.program_globals.APIC
    refreshToken(apic,cookie)
    location_banner('ERSPAN Setup')
    switchip = '10.200.200.213'
    if not prestaged:
        duration = None
        vpc = None
        location  = None
        destip = None
        srcip = None
        protocol = 'tcp'
        ports = 'unspecified'
        erspandestip = '1.1.1.1'

    if not erspandestip:
        while True:
            erspandestip = custom_raw_input("What is your wireshark computer IP?: ").strip()
            try: 
                ipaddress.IPv4Address(unicode(erspandestip))
                break
            except:
                print('Invalid Ip address')
                continue
    if not duration:
        while True:
            duration = custom_raw_input('How long to run datacenter ERSPAN?: ').strip()
            if not duration.isdigit():
                print('Not a valid number')
                continue
            if int(duration) > 500:
                print('500 seconds is the limit')
                continue
            break
    skipfilter = False
    if not srcip and not destip and ports == 'unspecified':
        while True:
            createfilter = custom_raw_input("Create Filter ACL for capturing?: ") or 'y'
            if createfilter != "" and createfilter[0].lower() == 'n':
                skipfilter = True
                break
            elif createfilter != "" and createfilter[0].lower() == 'y':
                while True:
                    srcip = custom_raw_input("What Source ip to monitor?: ").strip()
                    try: 
                        if srcip.strip() == 'any':
                            srcip = 'unspecified'
                            break
                        ipaddress.IPv4Address(unicode(srcip))
                        break
                    except:
                        print('Invalid Ip address')
                        continue
                while True:
                    destip = custom_raw_input("What destination ip to monitor?: ").strip()
                    try: 
                        if destip.strip() == 'any':
                            destip = 'unspecified'
                            break
                        ipaddress.IPv4Address(unicode(destip))
                        break
                    except:
                        print('Invalid Ip address')
                        continue
                while True:
                    protocol = custom_raw_input("What IP Protocol? (Example: ospf,pim,icmp,tcp,udp,any) [default=any]: ") or 'any'
                    protocol = protocol.strip()
                    if protocol != "":
                        if protocol == 'any':
                            protocol = 'unspecified'
                            break
                    if protocol.strip() in ['ip', 'tcp', 'udp']:
                        if protocol == 'ip':
                            protocol = 'unspecified'
                        while True:
                            ports = custom_raw_input("What port or port range? (Example: 80,80-90,any) [default=any]") or 'any'
                            ports = ports.strip()
                            if ports != "":
                                if ports == 'any':
                                    ports = 'unspecified'
                                    break
                            if '-' in ports:
                                ports = ports.split('-')
                                if not ports[0].isdigit() or not ports[1].isdigit():
                                    print('Invalid port numbers')
                                    continue
                                if ports[0] > ports[1]:
                                    print('Invlaid port range')
                                    continue
                                break
                            else:
                                ports = [ports,ports]
                                break
                    else:
                        ports = 'unspecified'
                        break
                    break
            else:
                continue
            break
    locationlist = []
    if not location and not vpc:
        if srcip and destip:
            print('\nSearching for source and destination interfaces...\n')
            for ip in [srcip,destip]:
                url = """https://{apic}/api/node/class/fvCEp.json?rsp-subtree=full&rsp-subtree-class=fvRsCEpToPathEp&rsp-subtree-include=required&query-target-filter=eq(fvCEp.ip,"{ip}")""".format(apic=apic,ip=ip)
                results, totalcount = GetResponseData(url,cookie,return_count=True)
                if int(totalcount) == 1:
                    locationlist.extend([path['fvRsCEpToPathEp']['attributes']['tDn'] for path in results[0]['fvCEp']['children']])
                elif int(totalcount) > 1:
                    for endpoint in results:
                        locationlist.extend([path['fvRsCEpToPathEp']['attributes']['tDn'] for path in results['fvCEp']['children']])
                elif totalcount == '0':
                    print('Unable to locate {} Endpoint, moving on...'.format(ip))
            if len(locationlist) > 0:
                locationlist = list(set(locationlist))
                print("Found interfaces associated to IPs provided:\n")
                for num,path in enumerate(locationlist,1):
                    print('   {}.) {}'.format(num,path))
                while True:
                    if len(locationlist) == 1:
                        search = custom_raw_input("\nWould you like to monitor found interface? [default=yes]: ") or 'all'
                        search = search.strip()
                        if search != "" and search[0].lower() == 'n':
                            break
                    else:
                        search = custom_raw_input("\nWhich interfaces would you like to monitor? [default=all]: ") or 'all'
                        search = search.strip()
                    if search != "" and search == 'all':
                        location = locationlist
                        break
                    try:
                        menunumbers = parseandreturnsingelist(search)
                        location = [locationlist[loc - 1] for loc in menunumbers]
                        break
                    except:
                        print('Invalid options, try again...')
                        continue
            else:
                print("\nUnable to locate any interface from IPs provide")
        additional = None
        ask = custom_raw_input("\nWould you like to add interfaces manually?: ") or 'no'
        if ask.strip() != "" and ask.strip()[0].lower() == 'y':
            additional = True
        if ask.strip() != "" and ask.strip()[0].lower() == 'n' and location == None:
            custom_raw_input('\nERROR: Source interface is required, exiting...')
            raise KeyboardInterrupt
        if location == None or additional:
            allepglist = get_All_EGPs_names(apic,cookie)
            allpclist = get_All_PCs(apic,cookie)
            allvpclist = get_All_vPCs(apic,cookie)
            all_leaflist = get_All_leafs(apic,cookie)
            while True:
                selection = monitor_interface_menu()
                if selection == '1':
                    chosenleafs = physical_leaf_selection(all_leaflist, apic, cookie)
                    switchpreviewutil.main(apic,cookie,chosenleafs)
                    returnedlist = physical_interface_selection(apic, cookie, chosenleafs, provideleaf=False)
                    locationlist.extend(returnedlist)
                    print('\r')
                elif selection == '2':
                    returnedlist = port_channel_selection(allpclist)
                    locationlist.extend(returnedlist)
                    print('\r')
                elif selection == '3':
                    returnedlist = port_channel_selection(allvpclist)
                    locationlist.extend(returnedlist)
                    print('\r')
                addmore = custom_raw_input("Add any more Interfaces,PCs,VPCs? [n]: ") or 'n'
                addmore = addmore.strip()
                if addmore != "" and addmore[0].lower() == 'n':
                    break
    if locationlist == []:
        if location == None and vpc != None:
            if ';' in vpc:
                locationlist = vpc.split(';')
            else:
                locationlist = [vpc]
        elif location == None and vpc == None:
            custom_raw_input('ERROR: Source interface is required, exiting...')
            raise KeyboardInterrupt
        else:
            locationlist = location

    if ports == 'unspecified':
        srcports = ['unspecified','unspecified']
        destports = ['unspecified','unspecified']
    elif type(ports) is list:
        srcports = ports
        destports = ['unspecified','unspecified']
    else: 
        srcports = ports.split(':')
        destports = ['unspecified','unspecified']
    erspandestname = 'OOBM_Switch_Relay'
    print('')
    print('*' * 25)
    print('Summary:\n Procotol {protocol}\n Ports: {ports}\n IP source: {srcip}\n IP dest: {destip}\n Duration: {duration}'.format(protocol=protocol,ports=ports,srcip=srcip,destip=destip,duration=duration))
    print('*' * 25)
    while True:
        create = custom_raw_input('\nCreate ERSPAN? [y|n]:')
        if create.strip() != "" and create.strip()[0].lower() == 'n':
            custom_raw_input('\nCanceled!')
            raise KeyboardInterrupt
        elif create.strip() != "" and create.strip()[0].lower() == 'y':
            break
    if skipfilter == True:
        filterdn = None
    else:
        filterdn = create_filter_acl('ERSPAN_Filter_{}'.format(user),user,srcip,destip,protocol,srcports,destports)
    erspanddestdn  = create_erspan_dest(erspandestname,user,erspandestip,erspansourceip='192.168.255.2',epgdn='uni/tn-SI/ap-APP-HQ/epg-EPG-VL9-SERVERS')
    spangroupdn = create_span_sourcegroup('ERSPAN_SOURCEGROUP_{}'.format(user),erspandestname,filterdn)
    create_span_sourcelocations('SPAN_Interfaces',spangroupdn,locationlist)
    print('\n')
    command = 'wireshark erspan ip any any 173.227.122.117 Vlan1000 2.2.2.2 {duration} both silent'.format(duration=str(duration))
    duration = int(duration)
    try:
        if __name__ != '__main__':
            print('Logging into OOBM Switch (10.200.200.213) to relay traffic to computer\n')
            sshlogin('cisco','10.200.200.213',command)
        else:
            print('ERSPAN will run for {duration} seconds'.format(duration=duration))
            print('\n')
            for i in range(duration +1):
                incre = int(50.0 / duration * i)
                if i != duration:
                    print('|{}{}| {}%{}'.format('='*incre, ' '*(51-incre), 2*incre,'\b'*200),end="") 
                else:
                    print('|{}{}{}| {}%'.format('='*20, 'COMPLETE!', '='*22, 100))
                time.sleep(1)
           # for t in range(duration):
           #     if (t % 2) == 0:
           #         print('  |{:11}|{}'.format('=' * round,'\b' * 100), end="")
           #         round += 1
           #     time.sleep(1)
    except:
        print('\n\nCancelling and will delete ERSPAN')
    finally:
        failurenum = 0
        failurelist = []
        for url in urllist:
            result = DeleteandGetResponseData(url[1],cookie)
            if result[1] != None:
                failurenum += 1
                failurelist.append('Failure: Unable to delete {} object'.format(url[0]))
        if failurenum == 0:
            print('\nSuccessfully removed ERSPAN from ACI')
        custom_raw_input('\nContinue...')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--protocol', type=str, nargs='?', help='protocol type')
    parser.add_argument('-s','--srcip', type=str, nargs='?',  help='source ip to filter')
    parser.add_argument('-d','--destip', type=str, nargs='?',  help='destination ip to filter')
    parser.add_argument('-p','--ports', type=str, nargs='?', help='protcol port numbers 80:85 means 80 upto 85')
    parser.add_argument('-t','--duration', type=str, nargs='?',  help='time limit for span')
    parser.add_argument('-l','--location', type=str, nargs='?',  help='leafxxx:ethx/x')
    parser.add_argument('--vpc', type=str, nargs='?',  help='vpcname to listen')
    parser.add_argument('--erspandest', type=str, nargs='?',  help='erspan destination ip')
    args = parser.parse_args()
    duration = args.duration
    vpc = args.vpc
    location = args.location
    destip = args.destip
    srcip = args.srcip
    protocol = args.protocol
    ports = args.ports
    erspandestip = args.erspandestip
    USER = os.environ['USER']
    main(user=USER,prestaged=True)



    #print(filter)
   # a = subprocess.Popen(r'ssh -T {user}@{switchip} -C "wireshark erspan ip any any {erspandest} Vlan1000 2.2.2.2 {duration} rx silent'.format(user=user,switchip=switchip,erspandest=erspandest,duration=duration), stderr=subprocess.PIPE,shell=True)
   # while True:
   #     s, b = a.communicate(input='show version')
   #     if b != "None":
   #         print(b)
   #     break